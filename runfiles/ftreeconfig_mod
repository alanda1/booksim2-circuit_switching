// $Id $

// Copyright (c) 2007-2015, Trustees of The Leland Stanford Junior University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

///////////////////BEGIN IMMUTABLE////////////////////////////////
//
// Flow control
//

// Total number of VCs must match the above assignments
num_injection_vcs = 1;
num_vcs     = 3;
//num_vcs must be at least 2 bigger
vc_buf_size = 128;

wait_for_tail_credit = 0;

//
// Router architectureq
//
vc_allocator = islip; 
sw_allocator = islip;
alloc_iters  = 2;

credit_delay   = 2;
routing_delay  = 1;
vc_alloc_delay = 1;
sw_alloc_delay = 1;
st_final_delay = 1;

input_speedup     = 1;
output_speedup    = 1;
internal_speedup  = 1.0;

//
// Traffic
//

sim_type = latency;

max_outstanding_requests = 8;

warmup_periods = 3;

sample_period  = 1000;  

sim_count          = 1;

///////////////////END IMMUTABLE////////////////////////////////



// Fat tree

topology = fattree;


k  = 2;
n  = 3;
xr = 2;
yr = 2;

//
// Routing
//

routing_function = nca_photonic;
router = photonic_credits;

packet_size = 1;

traffic       = uniform;

injection_rate = 0.01;
watch_file = ../runfiles/watch.txt;
watch_out = -;
